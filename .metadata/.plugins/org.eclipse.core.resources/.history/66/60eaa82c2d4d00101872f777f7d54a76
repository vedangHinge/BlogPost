package com.cdac.security;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.cdac.service.AuthenticationService;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j

public class JwtAuthenticationFilter extends OncePerRequestFilter {
	
	@Lazy
	@Autowired
	private AuthenticationService authenticationService;
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
	        throws ServletException, IOException {
	    try {
	        String path = request.getRequestURI();

//	        // Skip JWT filter for public endpoints
//	        if (path.startsWith("/api/v1/posts") ||
//	            path.startsWith("/api/v1/tags") ||
//	            path.startsWith("/api/v1/categories") ||
//	            path.startsWith("/api/v1/auth")) {
//	            filterChain.doFilter(request, response);
//	            return;
//	        }

	        // Check for Authorization header
	        String reqHeader = request.getHeader("Authorization");

	        if (reqHeader != null && reqHeader.startsWith("Bearer ")) {
	            String jwt = reqHeader.substring(7);

	            Authentication authentication = authenticationService.populateAuthenticationTokenFromJWT(jwt);
	            

	            if (authentication != null && authentication.isAuthenticated()) {
	            	SecurityContextHolder.getContext().setAuthentication(authentication);
	                Object principal = authentication.getPrincipal();
	                if (principal instanceof BlogUserDetails blogUserDetails) {
	                    request.setAttribute("userId", blogUserDetails.getId());
	                }
	            }
	        }

	        filterChain.doFilter(request, response);

	    } catch (Exception e) {
	        log.error("Invalid JWT token", e);
	        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
	    }
	}

	

}
