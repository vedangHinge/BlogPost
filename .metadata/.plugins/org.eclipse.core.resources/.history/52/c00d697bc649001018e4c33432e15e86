package com.cdac.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.cdac.Dto.PostDto;
import com.cdac.custom_exception.ResourceNotFoundException;
import com.cdac.entity.Category;
import com.cdac.entity.Post;
import com.cdac.entity.PostStatus;
import com.cdac.entity.Tag;
import com.cdac.repo.CategoryRepo;
import com.cdac.repo.PostRepo;
import com.cdac.repo.TagsRepo;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class PostServiceImpl implements PostService{
	private CategoryRepo catRepo;
	private TagsRepo tagRepo;
	private PostRepo postRepo;
	private ModelMapper mapper;
	@Override
	public List<PostDto> getAllPosts(UUID categoryId, UUID tagId) {
		if(categoryId!=null && tagId!=null) {
			Category category=catRepo.findById(categoryId).orElseThrow(()->new ResourceNotFoundException("category not found"));
			Tag tag= tagRepo.findById(tagId).orElseThrow(()->new ResourceNotFoundException("Tag not found"));
			List<Post> posts=postRepo.findAllByStatusAndMyCategoryAndTagsContaining(PostStatus.PUBLISHED, category, tag);
			return posts.stream().map(a->mapper.map(a, PostDto.class)).collect(Collectors.toList());
		}
		if(categoryId!=null) {
			Category category=catRepo.findById(categoryId).orElseThrow(()->new ResourceNotFoundException("category not found"));
			List<Post> posts=postRepo.findAllByStatusAndMyCategory(PostStatus.PUBLISHED, category);
			return posts.stream().map(a->mapper.map(a, PostDto.class)).collect(Collectors.toList());
		}
		if(tagId!=null) {
		
			Tag tag= tagRepo.findById(tagId).orElseThrow(()->new ResourceNotFoundException("Tag not found"));
			List<Post> posts=postRepo.findAllByStatusAndTagsContaining(PostStatus.PUBLISHED,tag);
			return posts.stream().map(a->mapper.map(a, PostDto.class)).collect(Collectors.toList());
		}
		 List<Post> list= postRepo.findAllByStatus(PostStatus.PUBLISHED);
		 return list.stream().map(a->mapper.map(a, PostDto.class)).collect(Collectors.toList());
	}

}
