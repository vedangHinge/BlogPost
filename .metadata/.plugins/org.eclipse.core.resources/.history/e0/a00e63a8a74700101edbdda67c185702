package com.cdac.service;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class AuthenticationServiceImpl implements AuthenticationService{
	private AuthenticationManager authManager;
	private UserDetailsService userDetailService;
	
	@Value("${jwt.secret.key}")
	private String secretKey;
	
	private Long jwtExpiryMs=86400000L;
	private SecretKey key;
	@PostConstruct
	public void init() {
		key=Keys.hmacShaKeyFor(secretKey.getBytes());
	}
	@Override
	public UserDetails authenticate(String email, String password) {
		authManager.authenticate(new UsernamePasswordAuthenticationToken(email, password));
		return userDetailService.loadUserByUsername(email);
	}

	@Override
	public String generateToken(UserDetails userDetails) {
	Map<String,Object> claims=new HashMap<>();
	return Jwts.builder().setClaims(claims).setSubject(userDetails.getUsername())
			.setIssuedAt(new Date(System.currentTimeMillis()))
			.setExpiration(new Date(System.currentTimeMillis()+jwtExpiryMs))
			.signWith(key,SignatureAlgorithm.HS256).compact();
	}
	
	
	public Claims validateJwtToken(String token) {
		Claims claims=Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token).getBody();
		return claims.getSubject();
	}
	
	public Authentication populateAuthenticationTokenFromJWT(String jwt) {
		Claims payLoadClaims=validateToken(jwt);
	}

}
