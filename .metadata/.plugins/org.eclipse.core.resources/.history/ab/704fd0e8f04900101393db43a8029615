package com.cdac.security;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.cdac.service.AuthenticationService;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j

public class JwtAuthenticationFilter extends OncePerRequestFilter {
	
	@Lazy
	@Autowired
	private AuthenticationService authenticationService;
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		try {
			//check for request Header- Authentication
			String reqHeader=request.getHeader("Authorization");
			//Extract Token
			if(reqHeader!=null && reqHeader.startsWith("Bearer ")) {
				String jwt=reqHeader.substring(7);
				// 3. validate token n 
				//get populated authentication object from the token
				Authentication authentication=authenticationService.populateAuthenticationTokenFromJWT(jwt);
				SecurityContextHolder.getContext().setAuthentication(authentication);
				
			}
			
			filterChain.doFilter(request, response);
		}catch(Exception e) {
			log.error("Invalid JWT token", e);

		}
		
	}
	

}
